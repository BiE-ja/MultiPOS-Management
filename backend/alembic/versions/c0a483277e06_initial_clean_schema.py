"""initial clean schema

Revision ID: c0a483277e06
Revises: 
Create Date: 2025-09-19 11:44:19.105717

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'c0a483277e06'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('area',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_area_id'), 'area', ['id'], unique=False)
    op.create_index(op.f('ix_area_name'), 'area', ['name'], unique=False)
    op.create_table('denomination',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=10), nullable=False),
    sa.Column('value', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('currency', sa.String(length=10), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_denomination_id'), 'denomination', ['id'], unique=False)
    op.create_table('category',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('cat_name', sa.String(), nullable=True),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_category_cat_name'), 'category', ['cat_name'], unique=False)
    op.create_index(op.f('ix_category_id'), 'category', ['id'], unique=False)
    op.create_table('customer',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_customer_id'), 'customer', ['id'], unique=False)
    op.create_table('employee',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(length=255), nullable=False),
    sa.Column('last_name', sa.String(length=255), nullable=True),
    sa.Column('phone', sa.String(length=255), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('adress', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_employee_id'), 'employee', ['id'], unique=False)
    op.create_table('role',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_role_id'), 'role', ['id'], unique=False)
    op.create_table('supplier',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=50), nullable=False),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_supplier_id'), 'supplier', ['id'], unique=False)
    op.create_table('product',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('reference', sa.String(length=50), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=100), nullable=False),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.Column('category_id', sa.UUID(), nullable=True),
    sa.Column('purchase_price', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('sale_price', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('old_stock', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('actual_stock', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('state', sa.Enum('PENDING', 'VALIDED', 'REJECTED', name='productcreationstate'), nullable=False),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.ForeignKeyConstraint(['category_id'], ['category.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_product_id'), 'product', ['id'], unique=False)
    op.create_index(op.f('ix_product_name'), 'product', ['name'], unique=False)
    op.create_index(op.f('ix_product_reference'), 'product', ['reference'], unique=False)
    op.create_table('user',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('last_name', sa.String(length=255), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=255), nullable=True),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_owner', sa.Boolean(), nullable=False),
    sa.Column('is_password_reinitialized', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('employee_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['employee.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('employee_id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_id'), 'user', ['id'], unique=False)
    op.create_table('area_owners',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'area_id')
    )
    op.create_table('cash_account',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('amount_init', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('state', sa.Enum('OPEN', 'CLOSED', 'BALANCED', 'NOT_BALANCED', 'BALANCED_FORCED', name='cashaccountstate'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.Column('balancing_amount', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cash_account_id'), 'cash_account', ['id'], unique=False)
    op.create_table('inventory',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('invotory_date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('theoritical_quantity', sa.Float(), nullable=False),
    sa.Column('counted_quantity', sa.Float(), nullable=False),
    sa.Column('dateOf', sa.DateTime(timezone=True), nullable=False),
    sa.Column('invistigation_notes', sa.Text(), nullable=True),
    sa.Column('validated_quantity', sa.Float(), nullable=False),
    sa.Column('investigator_id', sa.UUID(), nullable=True),
    sa.Column('validated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.ForeignKeyConstraint(['investigator_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_inventory_id'), 'inventory', ['id'], unique=False)
    op.create_table('log',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('dateAction', sa.DateTime(timezone=True), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.Column('action', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_log_id'), 'log', ['id'], unique=False)
    op.create_table('lot',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('lot_number', sa.String(length=50), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('initial_quantity', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('actual_quantity', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('perimed_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_lot_id'), 'lot', ['id'], unique=False)
    op.create_index(op.f('ix_lot_lot_number'), 'lot', ['lot_number'], unique=True)
    op.create_table('order',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('reference', sa.String(length=255), nullable=False),
    sa.Column('dateof', sa.DateTime(timezone=True), nullable=False),
    sa.Column('initiated_by_id', sa.UUID(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('updated_by_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Enum('OPENED', 'DELIVERED', 'CLOSED', 'REJECTED', name='request_status'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('comments', sa.String(length=100), nullable=True),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['initiated_by_id'], ['customer.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('reference')
    )
    op.create_index(op.f('ix_order_id'), 'order', ['id'], unique=False)
    op.create_table('price_history',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Enum('SALE', 'PURCHASE', name='pricetype'), nullable=False),
    sa.Column('old_value', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('new_value', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_price_history_id'), 'price_history', ['id'], unique=False)
    op.create_table('purchase_request',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('reference', sa.String(length=255), nullable=False),
    sa.Column('dateof', sa.DateTime(timezone=True), nullable=False),
    sa.Column('initiated_by_id', sa.UUID(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('updated_by_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Enum('OPENED', 'DELIVERED', 'CLOSED', 'REJECTED', name='request_status'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('comments', sa.String(length=100), nullable=True),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['initiated_by_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('reference')
    )
    op.create_index(op.f('ix_purchase_request_id'), 'purchase_request', ['id'], unique=False)
    op.create_table('sale',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('customer_id', sa.UUID(), nullable=False),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.Column('reference', sa.String(length=255), nullable=False),
    sa.Column('date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'DELIVERED', 'REJECTED', name='salestatus'), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.Column('updated_by_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('reference')
    )
    op.create_index(op.f('ix_sale_id'), 'sale', ['id'], unique=False)
    op.create_table('supplier_product_list',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('supplier_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['supplier.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_supplier_product_list_id'), 'supplier_product_list', ['id'], unique=False)
    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('cash_adjustement',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('register_id', sa.UUID(), nullable=False),
    sa.Column('performed_by_id', sa.UUID(), nullable=False),
    sa.Column('typeOf', sa.Enum('OPENING', 'BALANCING', 'FORCING_BALANCE', name='cashadjustementtype'), nullable=False),
    sa.Column('dateof', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['performed_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['register_id'], ['cash_account.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cash_adjustement_id'), 'cash_adjustement', ['id'], unique=False)
    op.create_table('cash_transaction',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('direction', sa.Enum('IN', 'OUT', name='transactiondirection'), nullable=False),
    sa.Column('operation', sa.Enum('SALE_PAYMENT', 'SUPPLY', 'CORRECTION_IN', 'CORRECTION_OUT', 'BANK_TRANSFERT', 'MISC_EXPENSE_IN', 'MISC_EXPENSE_OUT', name='transactionpurpose'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'FINALIZED', 'OPENED', 'CLOSED', 'COMPLETED', 'FAILED', 'PARTIAL', 'CANCELED', 'REJECTED', name='transactionstate'), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('updated_reason', sa.String(length=255), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_by_id', sa.UUID(), nullable=True),
    sa.Column('register_id', sa.UUID(), nullable=False),
    sa.Column('payment_ref', sa.String(length=50), nullable=True),
    sa.Column('dateOf', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['register_id'], ['cash_account.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cash_transaction_id'), 'cash_transaction', ['id'], unique=False)
    op.create_table('invoice',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('ref', sa.String(length=50), nullable=True),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.Column('dateof', sa.DateTime(timezone=True), nullable=False),
    sa.Column('initiated_by_id', sa.UUID(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('updated_by_id', sa.UUID(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('type', sa.Enum('IN', 'OUT', name='transactiontype'), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'FINALIZED', 'OPENED', 'CLOSED', 'COMPLETED', 'FAILED', 'PARTIAL', 'CANCELED', 'REJECTED', name='transactionstate'), nullable=False),
    sa.Column('comments', sa.String(length=255), nullable=True),
    sa.Column('amount_payed', sa.Numeric(precision=18, scale=2), nullable=True),
    sa.Column('purchase_id', sa.UUID(), nullable=True),
    sa.Column('order_id', sa.UUID(), nullable=True),
    sa.Column('supplier_id', sa.UUID(), nullable=True),
    sa.Column('customer_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['customer.id'], ),
    sa.ForeignKeyConstraint(['initiated_by_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.ForeignKeyConstraint(['purchase_id'], ['purchase_request.id'], ),
    sa.ForeignKeyConstraint(['supplier_id'], ['supplier.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_invoice_id'), 'invoice', ['id'], unique=False)
    op.create_table('order_detail_line',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('order_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('quantity_requested', sa.Integer(), nullable=False),
    sa.Column('quantity_accorded', sa.Integer(), nullable=True),
    sa.Column('unitaryPrice', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['order_id'], ['order.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_detail_line_id'), 'order_detail_line', ['id'], unique=False)
    op.create_table('purchase_detail_line',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('purchase_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('quantity_requested', sa.Integer(), nullable=False),
    sa.Column('quantity_accorded', sa.Integer(), nullable=True),
    sa.Column('unitaryPrice', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.ForeignKeyConstraint(['purchase_id'], ['purchase_request.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_purchase_detail_line_id'), 'purchase_detail_line', ['id'], unique=False)
    op.create_table('sale_detail_line',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('sale_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('unitaryPrice', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.ForeignKeyConstraint(['sale_id'], ['sale.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sale_detail_line_id'), 'sale_detail_line', ['id'], unique=False)
    op.create_table('cash_adjustement_line',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('adjustement_id', sa.UUID(), nullable=False),
    sa.Column('denomination_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['adjustement_id'], ['cash_adjustement.id'], ),
    sa.ForeignKeyConstraint(['denomination_id'], ['denomination.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cash_adjustement_line_id'), 'cash_adjustement_line', ['id'], unique=False)
    op.create_table('invoice_details_line',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('invoice_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('quantity_requested', sa.Integer(), nullable=False),
    sa.Column('quantity_real', sa.Integer(), nullable=True),
    sa.Column('unitaryPrice', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoice.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_invoice_details_line_id'), 'invoice_details_line', ['id'], unique=False)
    op.create_table('payments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('reference', sa.String(), nullable=True),
    sa.Column('amount', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('date', sa.DateTime(timezone=True), nullable=False),
    sa.Column('method', sa.Enum('CARD', 'CHECK', 'CASH', 'WIRE', name='paymentmethod'), nullable=False),
    sa.Column('state', sa.Enum('PENDING', 'FINALIZED', 'OPENED', 'CLOSED', 'COMPLETED', 'FAILED', 'PARTIAL', 'CANCELED', 'REJECTED', name='transactionstate'), nullable=False),
    sa.Column('direction', sa.Enum('IN', 'OUT', name='transactiontype'), nullable=False),
    sa.Column('sale_id', sa.UUID(), nullable=False),
    sa.Column('invoice_id', sa.UUID(), nullable=False),
    sa.Column('cash_transac_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['cash_transac_id'], ['cash_transaction.id'], ),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoice.id'], ),
    sa.ForeignKeyConstraint(['sale_id'], ['sale.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_payments_id'), 'payments', ['id'], unique=False)
    op.create_table('stock_movement',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('area_id', sa.UUID(), nullable=False),
    sa.Column('product_id', sa.UUID(), nullable=False),
    sa.Column('direction', sa.Enum('IN', 'OUT', name='movementdirection'), nullable=False),
    sa.Column('operation', sa.Enum('SALE', 'SUPPLY', 'CORRECTION', 'RETURN_SUPPLIER', 'RETURN_CUSTOMER', 'OTHER', name='movementoperation'), nullable=False),
    sa.Column('quantity', sa.Numeric(precision=18, scale=2), nullable=False),
    sa.Column('lot_id', sa.UUID(), nullable=True),
    sa.Column('create_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('dateOf', sa.DateTime(timezone=True), nullable=False),
    sa.Column('comment', sa.String(length=255), nullable=True),
    sa.Column('initiated_by_id', sa.UUID(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_by_id', sa.UUID(), nullable=True),
    sa.Column('sale_details_line_id', sa.UUID(), nullable=True),
    sa.Column('purchase_details_line_id', sa.UUID(), nullable=True),
    sa.Column('order_details_line_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['area_id'], ['area.id'], ),
    sa.ForeignKeyConstraint(['created_by_id'], ['user.id'], ),
    sa.ForeignKeyConstraint(['initiated_by_id'], ['employee.id'], ),
    sa.ForeignKeyConstraint(['lot_id'], ['lot.id'], ),
    sa.ForeignKeyConstraint(['order_details_line_id'], ['order_detail_line.id'], ),
    sa.ForeignKeyConstraint(['product_id'], ['product.id'], ),
    sa.ForeignKeyConstraint(['purchase_details_line_id'], ['purchase_detail_line.id'], ),
    sa.ForeignKeyConstraint(['sale_details_line_id'], ['sale_detail_line.id'], ),
    sa.ForeignKeyConstraint(['updated_by_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_stock_movement_id'), 'stock_movement', ['id'], unique=False)
    op.create_table('transaction_details_line',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('transac_id', sa.UUID(), nullable=False),
    sa.Column('denomination_id', sa.UUID(), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['denomination_id'], ['denomination.id'], ),
    sa.ForeignKeyConstraint(['transac_id'], ['cash_transaction.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('transac_id')
    )
    op.create_index(op.f('ix_transaction_details_line_id'), 'transaction_details_line', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_transaction_details_line_id'), table_name='transaction_details_line')
    op.drop_table('transaction_details_line')
    op.drop_index(op.f('ix_stock_movement_id'), table_name='stock_movement')
    op.drop_table('stock_movement')
    op.drop_index(op.f('ix_payments_id'), table_name='payments')
    op.drop_table('payments')
    op.drop_index(op.f('ix_invoice_details_line_id'), table_name='invoice_details_line')
    op.drop_table('invoice_details_line')
    op.drop_index(op.f('ix_cash_adjustement_line_id'), table_name='cash_adjustement_line')
    op.drop_table('cash_adjustement_line')
    op.drop_index(op.f('ix_sale_detail_line_id'), table_name='sale_detail_line')
    op.drop_table('sale_detail_line')
    op.drop_index(op.f('ix_purchase_detail_line_id'), table_name='purchase_detail_line')
    op.drop_table('purchase_detail_line')
    op.drop_index(op.f('ix_order_detail_line_id'), table_name='order_detail_line')
    op.drop_table('order_detail_line')
    op.drop_index(op.f('ix_invoice_id'), table_name='invoice')
    op.drop_table('invoice')
    op.drop_index(op.f('ix_cash_transaction_id'), table_name='cash_transaction')
    op.drop_table('cash_transaction')
    op.drop_index(op.f('ix_cash_adjustement_id'), table_name='cash_adjustement')
    op.drop_table('cash_adjustement')
    op.drop_table('user_roles')
    op.drop_index(op.f('ix_supplier_product_list_id'), table_name='supplier_product_list')
    op.drop_table('supplier_product_list')
    op.drop_index(op.f('ix_sale_id'), table_name='sale')
    op.drop_table('sale')
    op.drop_index(op.f('ix_purchase_request_id'), table_name='purchase_request')
    op.drop_table('purchase_request')
    op.drop_index(op.f('ix_price_history_id'), table_name='price_history')
    op.drop_table('price_history')
    op.drop_index(op.f('ix_order_id'), table_name='order')
    op.drop_table('order')
    op.drop_index(op.f('ix_lot_lot_number'), table_name='lot')
    op.drop_index(op.f('ix_lot_id'), table_name='lot')
    op.drop_table('lot')
    op.drop_index(op.f('ix_log_id'), table_name='log')
    op.drop_table('log')
    op.drop_index(op.f('ix_inventory_id'), table_name='inventory')
    op.drop_table('inventory')
    op.drop_index(op.f('ix_cash_account_id'), table_name='cash_account')
    op.drop_table('cash_account')
    op.drop_table('area_owners')
    op.drop_index(op.f('ix_user_id'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_product_reference'), table_name='product')
    op.drop_index(op.f('ix_product_name'), table_name='product')
    op.drop_index(op.f('ix_product_id'), table_name='product')
    op.drop_table('product')
    op.drop_index(op.f('ix_supplier_id'), table_name='supplier')
    op.drop_table('supplier')
    op.drop_index(op.f('ix_role_id'), table_name='role')
    op.drop_table('role')
    op.drop_index(op.f('ix_employee_id'), table_name='employee')
    op.drop_table('employee')
    op.drop_index(op.f('ix_customer_id'), table_name='customer')
    op.drop_table('customer')
    op.drop_index(op.f('ix_category_id'), table_name='category')
    op.drop_index(op.f('ix_category_cat_name'), table_name='category')
    op.drop_table('category')
    op.drop_index(op.f('ix_denomination_id'), table_name='denomination')
    op.drop_table('denomination')
    op.drop_index(op.f('ix_area_name'), table_name='area')
    op.drop_index(op.f('ix_area_id'), table_name='area')
    op.drop_table('area')
    # ### end Alembic commands ###
