/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tantana - Boutik
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  BodyAuthLogin,
  HTTPValidationError,
  Token
} from '../schemas';

import { customAxios } from '../custom-client';





/**
 * OAuth2 compatible token login, get an access token for future requests
 * @summary Login
 */
export const authLogin = (
    bodyAuthLogin: BodyAuthLogin,
 signal?: AbortSignal
) => {
      
      const formUrlEncoded = new URLSearchParams();
if(bodyAuthLogin.grant_type !== undefined && bodyAuthLogin.grant_type !== null) {
 formUrlEncoded.append(`grant_type`, bodyAuthLogin.grant_type)
 }
formUrlEncoded.append(`username`, bodyAuthLogin.username)
formUrlEncoded.append(`password`, bodyAuthLogin.password)
if(bodyAuthLogin.scope !== undefined) {
 formUrlEncoded.append(`scope`, bodyAuthLogin.scope)
 }
if(bodyAuthLogin.client_id !== undefined && bodyAuthLogin.client_id !== null) {
 formUrlEncoded.append(`client_id`, bodyAuthLogin.client_id)
 }
if(bodyAuthLogin.client_secret !== undefined && bodyAuthLogin.client_secret !== null) {
 formUrlEncoded.append(`client_secret`, bodyAuthLogin.client_secret)
 }

      return customAxios<Token>(
      {url: `/api/v0.1/login/access-token`, method: 'POST',
      headers: {'Content-Type': 'application/x-www-form-urlencoded', },
       data: formUrlEncoded, signal
    },
      );
    }
  


export const getAuthLoginMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogin>>, TError,{data: BodyAuthLogin}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authLogin>>, TError,{data: BodyAuthLogin}, TContext> => {

const mutationKey = ['authLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authLogin>>, {data: BodyAuthLogin}> = (props) => {
          const {data} = props ?? {};

          return  authLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authLogin>>>
    export type AuthLoginMutationBody = BodyAuthLogin
    export type AuthLoginMutationError = HTTPValidationError

    /**
 * @summary Login
 */
export const useAuthLogin = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authLogin>>, TError,{data: BodyAuthLogin}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authLogin>>,
        TError,
        {data: BodyAuthLogin},
        TContext
      > => {

      const mutationOptions = getAuthLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    