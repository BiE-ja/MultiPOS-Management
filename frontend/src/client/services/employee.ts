/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tantana - Boutik
 * OpenAPI spec version: 0.1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  EmployeeCreate,
  EmployeeRead,
  EmployeeUpdate,
  HTTPValidationError,
  Message
} from '../schemas';

import { customAxios } from '../custom-client';





/**
 * @summary Read
 */
export const employeeRead = (
    areaId: string,
    employeeId: string,
 signal?: AbortSignal
) => {
      
      
      return customAxios<EmployeeRead>(
      {url: `/api/v0.1/unit/employee/${areaId}/${employeeId}`, method: 'GET', signal
    },
      );
    }
  

export const getEmployeeReadQueryKey = (areaId?: string,
    employeeId?: string,) => {
    return [`/api/v0.1/unit/employee/${areaId}/${employeeId}`] as const;
    }

    
export const getEmployeeReadInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof employeeRead>>>, TError = HTTPValidationError>(areaId: string,
    employeeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEmployeeReadQueryKey(areaId,employeeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof employeeRead>>> = ({ signal }) => employeeRead(areaId,employeeId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(areaId && employeeId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EmployeeReadInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof employeeRead>>>
export type EmployeeReadInfiniteQueryError = HTTPValidationError


export function useEmployeeReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof employeeRead>>>, TError = HTTPValidationError>(
 areaId: string,
    employeeId: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof employeeRead>>,
          TError,
          Awaited<ReturnType<typeof employeeRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmployeeReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof employeeRead>>>, TError = HTTPValidationError>(
 areaId: string,
    employeeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof employeeRead>>,
          TError,
          Awaited<ReturnType<typeof employeeRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmployeeReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof employeeRead>>>, TError = HTTPValidationError>(
 areaId: string,
    employeeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read
 */

export function useEmployeeReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof employeeRead>>>, TError = HTTPValidationError>(
 areaId: string,
    employeeId: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEmployeeReadInfiniteQueryOptions(areaId,employeeId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getEmployeeReadQueryOptions = <TData = Awaited<ReturnType<typeof employeeRead>>, TError = HTTPValidationError>(areaId: string,
    employeeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getEmployeeReadQueryKey(areaId,employeeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof employeeRead>>> = ({ signal }) => employeeRead(areaId,employeeId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(areaId && employeeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type EmployeeReadQueryResult = NonNullable<Awaited<ReturnType<typeof employeeRead>>>
export type EmployeeReadQueryError = HTTPValidationError


export function useEmployeeRead<TData = Awaited<ReturnType<typeof employeeRead>>, TError = HTTPValidationError>(
 areaId: string,
    employeeId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof employeeRead>>,
          TError,
          Awaited<ReturnType<typeof employeeRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmployeeRead<TData = Awaited<ReturnType<typeof employeeRead>>, TError = HTTPValidationError>(
 areaId: string,
    employeeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof employeeRead>>,
          TError,
          Awaited<ReturnType<typeof employeeRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useEmployeeRead<TData = Awaited<ReturnType<typeof employeeRead>>, TError = HTTPValidationError>(
 areaId: string,
    employeeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read
 */

export function useEmployeeRead<TData = Awaited<ReturnType<typeof employeeRead>>, TError = HTTPValidationError>(
 areaId: string,
    employeeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof employeeRead>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getEmployeeReadQueryOptions(areaId,employeeId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update
 */
export const employeeUpdate = (
    areaId: string,
    employeeId: string,
    employeeUpdate: EmployeeUpdate,
 ) => {
      
      
      return customAxios<EmployeeRead>(
      {url: `/api/v0.1/unit/employee/${areaId}/${employeeId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: employeeUpdate
    },
      );
    }
  


export const getEmployeeUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof employeeUpdate>>, TError,{areaId: string;employeeId: string;data: EmployeeUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof employeeUpdate>>, TError,{areaId: string;employeeId: string;data: EmployeeUpdate}, TContext> => {

const mutationKey = ['employeeUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof employeeUpdate>>, {areaId: string;employeeId: string;data: EmployeeUpdate}> = (props) => {
          const {areaId,employeeId,data} = props ?? {};

          return  employeeUpdate(areaId,employeeId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EmployeeUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof employeeUpdate>>>
    export type EmployeeUpdateMutationBody = EmployeeUpdate
    export type EmployeeUpdateMutationError = HTTPValidationError

    /**
 * @summary Update
 */
export const useEmployeeUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof employeeUpdate>>, TError,{areaId: string;employeeId: string;data: EmployeeUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof employeeUpdate>>,
        TError,
        {areaId: string;employeeId: string;data: EmployeeUpdate},
        TContext
      > => {

      const mutationOptions = getEmployeeUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete
 */
export const employeeDelete = (
    areaId: string,
    employeeId: string,
 ) => {
      
      
      return customAxios<Message>(
      {url: `/api/v0.1/unit/employee/${areaId}/${employeeId}`, method: 'DELETE'
    },
      );
    }
  


export const getEmployeeDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof employeeDelete>>, TError,{areaId: string;employeeId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof employeeDelete>>, TError,{areaId: string;employeeId: string}, TContext> => {

const mutationKey = ['employeeDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof employeeDelete>>, {areaId: string;employeeId: string}> = (props) => {
          const {areaId,employeeId} = props ?? {};

          return  employeeDelete(areaId,employeeId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EmployeeDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof employeeDelete>>>
    
    export type EmployeeDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete
 */
export const useEmployeeDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof employeeDelete>>, TError,{areaId: string;employeeId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof employeeDelete>>,
        TError,
        {areaId: string;employeeId: string},
        TContext
      > => {

      const mutationOptions = getEmployeeDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Create
 */
export const employeeCreate = (
    areaId: string,
    employeeCreate: EmployeeCreate,
 signal?: AbortSignal
) => {
      
      
      return customAxios<EmployeeRead>(
      {url: `/api/v0.1/unit/employee/${areaId}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: employeeCreate, signal
    },
      );
    }
  


export const getEmployeeCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof employeeCreate>>, TError,{areaId: string;data: EmployeeCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof employeeCreate>>, TError,{areaId: string;data: EmployeeCreate}, TContext> => {

const mutationKey = ['employeeCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof employeeCreate>>, {areaId: string;data: EmployeeCreate}> = (props) => {
          const {areaId,data} = props ?? {};

          return  employeeCreate(areaId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EmployeeCreateMutationResult = NonNullable<Awaited<ReturnType<typeof employeeCreate>>>
    export type EmployeeCreateMutationBody = EmployeeCreate
    export type EmployeeCreateMutationError = HTTPValidationError

    /**
 * @summary Create
 */
export const useEmployeeCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof employeeCreate>>, TError,{areaId: string;data: EmployeeCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof employeeCreate>>,
        TError,
        {areaId: string;data: EmployeeCreate},
        TContext
      > => {

      const mutationOptions = getEmployeeCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    