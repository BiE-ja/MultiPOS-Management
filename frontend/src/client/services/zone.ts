/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tantana - Boutik
 * OpenAPI spec version: 0.1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AreaCreate,
  AreaRead,
  HTTPValidationError,
  Message,
  UsersPublic
} from '../schemas';

import { customAxios } from '../custom-client';





/**
 * @summary Create
 */
export const zoneCreate = (
    areaCreate: AreaCreate,
 signal?: AbortSignal
) => {
      
      
      return customAxios<AreaRead>(
      {url: `/api/v0.1/unit/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: areaCreate, signal
    },
      );
    }
  


export const getZoneCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof zoneCreate>>, TError,{data: AreaCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof zoneCreate>>, TError,{data: AreaCreate}, TContext> => {

const mutationKey = ['zoneCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof zoneCreate>>, {data: AreaCreate}> = (props) => {
          const {data} = props ?? {};

          return  zoneCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ZoneCreateMutationResult = NonNullable<Awaited<ReturnType<typeof zoneCreate>>>
    export type ZoneCreateMutationBody = AreaCreate
    export type ZoneCreateMutationError = HTTPValidationError

    /**
 * @summary Create
 */
export const useZoneCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof zoneCreate>>, TError,{data: AreaCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof zoneCreate>>,
        TError,
        {data: AreaCreate},
        TContext
      > => {

      const mutationOptions = getZoneCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Read
 */
export const zoneRead = (
    areaId: number,
 signal?: AbortSignal
) => {
      
      
      return customAxios<AreaRead>(
      {url: `/api/v0.1/unit/${areaId}`, method: 'GET', signal
    },
      );
    }
  

export const getZoneReadQueryKey = (areaId?: number,) => {
    return [`/api/v0.1/unit/${areaId}`] as const;
    }

    
export const getZoneReadInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof zoneRead>>>, TError = HTTPValidationError>(areaId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getZoneReadQueryKey(areaId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof zoneRead>>> = ({ signal }) => zoneRead(areaId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(areaId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ZoneReadInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof zoneRead>>>
export type ZoneReadInfiniteQueryError = HTTPValidationError


export function useZoneReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof zoneRead>>>, TError = HTTPValidationError>(
 areaId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof zoneRead>>,
          TError,
          Awaited<ReturnType<typeof zoneRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useZoneReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof zoneRead>>>, TError = HTTPValidationError>(
 areaId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof zoneRead>>,
          TError,
          Awaited<ReturnType<typeof zoneRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useZoneReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof zoneRead>>>, TError = HTTPValidationError>(
 areaId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read
 */

export function useZoneReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof zoneRead>>>, TError = HTTPValidationError>(
 areaId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getZoneReadInfiniteQueryOptions(areaId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getZoneReadQueryOptions = <TData = Awaited<ReturnType<typeof zoneRead>>, TError = HTTPValidationError>(areaId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getZoneReadQueryKey(areaId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof zoneRead>>> = ({ signal }) => zoneRead(areaId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(areaId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ZoneReadQueryResult = NonNullable<Awaited<ReturnType<typeof zoneRead>>>
export type ZoneReadQueryError = HTTPValidationError


export function useZoneRead<TData = Awaited<ReturnType<typeof zoneRead>>, TError = HTTPValidationError>(
 areaId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof zoneRead>>,
          TError,
          Awaited<ReturnType<typeof zoneRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useZoneRead<TData = Awaited<ReturnType<typeof zoneRead>>, TError = HTTPValidationError>(
 areaId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof zoneRead>>,
          TError,
          Awaited<ReturnType<typeof zoneRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useZoneRead<TData = Awaited<ReturnType<typeof zoneRead>>, TError = HTTPValidationError>(
 areaId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read
 */

export function useZoneRead<TData = Awaited<ReturnType<typeof zoneRead>>, TError = HTTPValidationError>(
 areaId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof zoneRead>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getZoneReadQueryOptions(areaId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Delete
 */
export const zoneDelete = (
    areaId: number,
 ) => {
      
      
      return customAxios<Message>(
      {url: `/api/v0.1/unit/${areaId}`, method: 'DELETE'
    },
      );
    }
  


export const getZoneDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof zoneDelete>>, TError,{areaId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof zoneDelete>>, TError,{areaId: number}, TContext> => {

const mutationKey = ['zoneDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof zoneDelete>>, {areaId: number}> = (props) => {
          const {areaId} = props ?? {};

          return  zoneDelete(areaId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ZoneDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof zoneDelete>>>
    
    export type ZoneDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete
 */
export const useZoneDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof zoneDelete>>, TError,{areaId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof zoneDelete>>,
        TError,
        {areaId: number},
        TContext
      > => {

      const mutationOptions = getZoneDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Update
 */
export const zoneUpdate = (
    areaId: number,
 ) => {
      
      
      return customAxios<UsersPublic>(
      {url: `/api/v0.1/unit/${areaId}`, method: 'PUT'
    },
      );
    }
  


export const getZoneUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof zoneUpdate>>, TError,{areaId: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof zoneUpdate>>, TError,{areaId: number}, TContext> => {

const mutationKey = ['zoneUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof zoneUpdate>>, {areaId: number}> = (props) => {
          const {areaId} = props ?? {};

          return  zoneUpdate(areaId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ZoneUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof zoneUpdate>>>
    
    export type ZoneUpdateMutationError = HTTPValidationError

    /**
 * @summary Update
 */
export const useZoneUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof zoneUpdate>>, TError,{areaId: number}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof zoneUpdate>>,
        TError,
        {areaId: number},
        TContext
      > => {

      const mutationOptions = getZoneUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary List All
 */
export const zoneListAll = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxios<AreaRead[]>(
      {url: `/api/v0.1/unit/list`, method: 'GET', signal
    },
      );
    }
  

export const getZoneListAllQueryKey = () => {
    return [`/api/v0.1/unit/list`] as const;
    }

    
export const getZoneListAllInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof zoneListAll>>>, TError = unknown>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getZoneListAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof zoneListAll>>> = ({ signal }) => zoneListAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ZoneListAllInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof zoneListAll>>>
export type ZoneListAllInfiniteQueryError = unknown


export function useZoneListAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof zoneListAll>>>, TError = unknown>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof zoneListAll>>,
          TError,
          Awaited<ReturnType<typeof zoneListAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useZoneListAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof zoneListAll>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof zoneListAll>>,
          TError,
          Awaited<ReturnType<typeof zoneListAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useZoneListAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof zoneListAll>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All
 */

export function useZoneListAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof zoneListAll>>>, TError = unknown>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getZoneListAllInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getZoneListAllQueryOptions = <TData = Awaited<ReturnType<typeof zoneListAll>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getZoneListAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof zoneListAll>>> = ({ signal }) => zoneListAll(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type ZoneListAllQueryResult = NonNullable<Awaited<ReturnType<typeof zoneListAll>>>
export type ZoneListAllQueryError = unknown


export function useZoneListAll<TData = Awaited<ReturnType<typeof zoneListAll>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof zoneListAll>>,
          TError,
          Awaited<ReturnType<typeof zoneListAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useZoneListAll<TData = Awaited<ReturnType<typeof zoneListAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof zoneListAll>>,
          TError,
          Awaited<ReturnType<typeof zoneListAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useZoneListAll<TData = Awaited<ReturnType<typeof zoneListAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary List All
 */

export function useZoneListAll<TData = Awaited<ReturnType<typeof zoneListAll>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof zoneListAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getZoneListAllQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



