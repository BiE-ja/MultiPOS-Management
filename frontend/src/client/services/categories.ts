/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tantana - Boutik
 * OpenAPI spec version: 0.1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CategoriesDeleteParams,
  CategoriesFetchAllParams,
  HTTPValidationError,
  ProductCategoryCreate,
  ProductCategoryRead,
  ProductCategoryUpdate
} from '../schemas';

import { customAxios } from '../custom-client';





/**
 * @summary Create
 */
export const categoriesCreate = (
    productCategoryCreate: ProductCategoryCreate,
 signal?: AbortSignal
) => {
      
      
      return customAxios<ProductCategoryRead>(
      {url: `/api/v0.1/product/category/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: productCategoryCreate, signal
    },
      );
    }
  


export const getCategoriesCreateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoriesCreate>>, TError,{data: ProductCategoryCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof categoriesCreate>>, TError,{data: ProductCategoryCreate}, TContext> => {

const mutationKey = ['categoriesCreate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoriesCreate>>, {data: ProductCategoryCreate}> = (props) => {
          const {data} = props ?? {};

          return  categoriesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CategoriesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof categoriesCreate>>>
    export type CategoriesCreateMutationBody = ProductCategoryCreate
    export type CategoriesCreateMutationError = HTTPValidationError

    /**
 * @summary Create
 */
export const useCategoriesCreate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoriesCreate>>, TError,{data: ProductCategoryCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof categoriesCreate>>,
        TError,
        {data: ProductCategoryCreate},
        TContext
      > => {

      const mutationOptions = getCategoriesCreateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Read
 */
export const categoriesRead = (
    categoryId: number,
 signal?: AbortSignal
) => {
      
      
      return customAxios<ProductCategoryRead>(
      {url: `/api/v0.1/product/category/${categoryId}`, method: 'GET', signal
    },
      );
    }
  

export const getCategoriesReadQueryKey = (categoryId?: number,) => {
    return [`/api/v0.1/product/category/${categoryId}`] as const;
    }

    
export const getCategoriesReadInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof categoriesRead>>>, TError = HTTPValidationError>(categoryId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCategoriesReadQueryKey(categoryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof categoriesRead>>> = ({ signal }) => categoriesRead(categoryId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(categoryId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CategoriesReadInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof categoriesRead>>>
export type CategoriesReadInfiniteQueryError = HTTPValidationError


export function useCategoriesReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof categoriesRead>>>, TError = HTTPValidationError>(
 categoryId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesRead>>,
          TError,
          Awaited<ReturnType<typeof categoriesRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCategoriesReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof categoriesRead>>>, TError = HTTPValidationError>(
 categoryId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesRead>>,
          TError,
          Awaited<ReturnType<typeof categoriesRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCategoriesReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof categoriesRead>>>, TError = HTTPValidationError>(
 categoryId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read
 */

export function useCategoriesReadInfinite<TData = InfiniteData<Awaited<ReturnType<typeof categoriesRead>>>, TError = HTTPValidationError>(
 categoryId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCategoriesReadInfiniteQueryOptions(categoryId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCategoriesReadQueryOptions = <TData = Awaited<ReturnType<typeof categoriesRead>>, TError = HTTPValidationError>(categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCategoriesReadQueryKey(categoryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof categoriesRead>>> = ({ signal }) => categoriesRead(categoryId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(categoryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CategoriesReadQueryResult = NonNullable<Awaited<ReturnType<typeof categoriesRead>>>
export type CategoriesReadQueryError = HTTPValidationError


export function useCategoriesRead<TData = Awaited<ReturnType<typeof categoriesRead>>, TError = HTTPValidationError>(
 categoryId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesRead>>,
          TError,
          Awaited<ReturnType<typeof categoriesRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCategoriesRead<TData = Awaited<ReturnType<typeof categoriesRead>>, TError = HTTPValidationError>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesRead>>,
          TError,
          Awaited<ReturnType<typeof categoriesRead>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCategoriesRead<TData = Awaited<ReturnType<typeof categoriesRead>>, TError = HTTPValidationError>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Read
 */

export function useCategoriesRead<TData = Awaited<ReturnType<typeof categoriesRead>>, TError = HTTPValidationError>(
 categoryId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoriesRead>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCategoriesReadQueryOptions(categoryId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Update
 */
export const categoriesUpdate = (
    categoryId: number,
    productCategoryUpdate: ProductCategoryUpdate,
 ) => {
      
      
      return customAxios<ProductCategoryRead>(
      {url: `/api/v0.1/product/category/${categoryId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: productCategoryUpdate
    },
      );
    }
  


export const getCategoriesUpdateMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoriesUpdate>>, TError,{categoryId: number;data: ProductCategoryUpdate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof categoriesUpdate>>, TError,{categoryId: number;data: ProductCategoryUpdate}, TContext> => {

const mutationKey = ['categoriesUpdate'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoriesUpdate>>, {categoryId: number;data: ProductCategoryUpdate}> = (props) => {
          const {categoryId,data} = props ?? {};

          return  categoriesUpdate(categoryId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CategoriesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof categoriesUpdate>>>
    export type CategoriesUpdateMutationBody = ProductCategoryUpdate
    export type CategoriesUpdateMutationError = HTTPValidationError

    /**
 * @summary Update
 */
export const useCategoriesUpdate = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoriesUpdate>>, TError,{categoryId: number;data: ProductCategoryUpdate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof categoriesUpdate>>,
        TError,
        {categoryId: number;data: ProductCategoryUpdate},
        TContext
      > => {

      const mutationOptions = getCategoriesUpdateMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Delete
 */
export const categoriesDelete = (
    categoryId: number,
    params: CategoriesDeleteParams,
 ) => {
      
      
      return customAxios<null>(
      {url: `/api/v0.1/product/category/${categoryId}`, method: 'DELETE',
        params
    },
      );
    }
  


export const getCategoriesDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoriesDelete>>, TError,{categoryId: number;params: CategoriesDeleteParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof categoriesDelete>>, TError,{categoryId: number;params: CategoriesDeleteParams}, TContext> => {

const mutationKey = ['categoriesDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof categoriesDelete>>, {categoryId: number;params: CategoriesDeleteParams}> = (props) => {
          const {categoryId,params} = props ?? {};

          return  categoriesDelete(categoryId,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CategoriesDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof categoriesDelete>>>
    
    export type CategoriesDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete
 */
export const useCategoriesDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof categoriesDelete>>, TError,{categoryId: number;params: CategoriesDeleteParams}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof categoriesDelete>>,
        TError,
        {categoryId: number;params: CategoriesDeleteParams},
        TContext
      > => {

      const mutationOptions = getCategoriesDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * @summary Fetch All
 */
export const categoriesFetchAll = (
    areaId: number,
    params?: CategoriesFetchAllParams,
 signal?: AbortSignal
) => {
      
      
      return customAxios<ProductCategoryRead[]>(
      {url: `/api/v0.1/product/category-list/${areaId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getCategoriesFetchAllQueryKey = (areaId?: number,
    params?: CategoriesFetchAllParams,) => {
    return [`/api/v0.1/product/category-list/${areaId}`, ...(params ? [params]: [])] as const;
    }

    
export const getCategoriesFetchAllInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof categoriesFetchAll>>>, TError = HTTPValidationError>(areaId: number,
    params?: CategoriesFetchAllParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCategoriesFetchAllQueryKey(areaId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof categoriesFetchAll>>> = ({ signal }) => categoriesFetchAll(areaId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(areaId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CategoriesFetchAllInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof categoriesFetchAll>>>
export type CategoriesFetchAllInfiniteQueryError = HTTPValidationError


export function useCategoriesFetchAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof categoriesFetchAll>>>, TError = HTTPValidationError>(
 areaId: number,
    params: undefined |  CategoriesFetchAllParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesFetchAll>>,
          TError,
          Awaited<ReturnType<typeof categoriesFetchAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCategoriesFetchAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof categoriesFetchAll>>>, TError = HTTPValidationError>(
 areaId: number,
    params?: CategoriesFetchAllParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesFetchAll>>,
          TError,
          Awaited<ReturnType<typeof categoriesFetchAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCategoriesFetchAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof categoriesFetchAll>>>, TError = HTTPValidationError>(
 areaId: number,
    params?: CategoriesFetchAllParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Fetch All
 */

export function useCategoriesFetchAllInfinite<TData = InfiniteData<Awaited<ReturnType<typeof categoriesFetchAll>>>, TError = HTTPValidationError>(
 areaId: number,
    params?: CategoriesFetchAllParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCategoriesFetchAllInfiniteQueryOptions(areaId,params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getCategoriesFetchAllQueryOptions = <TData = Awaited<ReturnType<typeof categoriesFetchAll>>, TError = HTTPValidationError>(areaId: number,
    params?: CategoriesFetchAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCategoriesFetchAllQueryKey(areaId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof categoriesFetchAll>>> = ({ signal }) => categoriesFetchAll(areaId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(areaId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type CategoriesFetchAllQueryResult = NonNullable<Awaited<ReturnType<typeof categoriesFetchAll>>>
export type CategoriesFetchAllQueryError = HTTPValidationError


export function useCategoriesFetchAll<TData = Awaited<ReturnType<typeof categoriesFetchAll>>, TError = HTTPValidationError>(
 areaId: number,
    params: undefined |  CategoriesFetchAllParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesFetchAll>>,
          TError,
          Awaited<ReturnType<typeof categoriesFetchAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCategoriesFetchAll<TData = Awaited<ReturnType<typeof categoriesFetchAll>>, TError = HTTPValidationError>(
 areaId: number,
    params?: CategoriesFetchAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof categoriesFetchAll>>,
          TError,
          Awaited<ReturnType<typeof categoriesFetchAll>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useCategoriesFetchAll<TData = Awaited<ReturnType<typeof categoriesFetchAll>>, TError = HTTPValidationError>(
 areaId: number,
    params?: CategoriesFetchAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Fetch All
 */

export function useCategoriesFetchAll<TData = Awaited<ReturnType<typeof categoriesFetchAll>>, TError = HTTPValidationError>(
 areaId: number,
    params?: CategoriesFetchAllParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof categoriesFetchAll>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getCategoriesFetchAllQueryOptions(areaId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



