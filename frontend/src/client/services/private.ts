/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Tantana - Boutik
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  PrivateUserCreate,
  UserPublic
} from '../schemas';

import { customAxios } from '../custom-client';





/**
 * @summary Create User
 */
export const privateCreateUser = (
    privateUserCreate: PrivateUserCreate,
 signal?: AbortSignal
) => {
      
      
      return customAxios<UserPublic>(
      {url: `/api/v0.1/private/users/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: privateUserCreate, signal
    },
      );
    }
  


export const getPrivateCreateUserMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof privateCreateUser>>, TError,{data: PrivateUserCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof privateCreateUser>>, TError,{data: PrivateUserCreate}, TContext> => {

const mutationKey = ['privateCreateUser'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof privateCreateUser>>, {data: PrivateUserCreate}> = (props) => {
          const {data} = props ?? {};

          return  privateCreateUser(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PrivateCreateUserMutationResult = NonNullable<Awaited<ReturnType<typeof privateCreateUser>>>
    export type PrivateCreateUserMutationBody = PrivateUserCreate
    export type PrivateCreateUserMutationError = HTTPValidationError

    /**
 * @summary Create User
 */
export const usePrivateCreateUser = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof privateCreateUser>>, TError,{data: PrivateUserCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof privateCreateUser>>,
        TError,
        {data: PrivateUserCreate},
        TContext
      > => {

      const mutationOptions = getPrivateCreateUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    