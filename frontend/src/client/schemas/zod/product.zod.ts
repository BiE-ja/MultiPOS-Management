/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Tantana - Boutik
 * OpenAPI spec version: 0.1.0
 */
import {
  z as zod
} from 'zod';



/**
 * @summary Create
 */
export const productCreateBody = zod.object({
  "reference": zod.string(),
  "name": zod.string(),
  "description": zod.union([zod.string(),zod.null()]),
  "category_name": zod.union([zod.string(),zod.null()]),
  "area_id": zod.number(),
  "price": zod.number(),
  "purchase_price": zod.union([zod.number(),zod.null()]),
  "init_stock": zod.union([zod.number(),zod.null()]),
  "actual_stock": zod.union([zod.number(),zod.null()])
})

export const productCreateResponse = zod.object({
  "reference": zod.string(),
  "name": zod.string(),
  "description": zod.union([zod.string(),zod.null()]),
  "category_name": zod.union([zod.string(),zod.null()]),
  "area_id": zod.number(),
  "price": zod.number(),
  "purchase_price": zod.union([zod.number(),zod.null()]),
  "init_stock": zod.union([zod.number(),zod.null()]),
  "actual_stock": zod.union([zod.number(),zod.null()]),
  "id": zod.number(),
  "state": zod.enum(['pending', 'valided', 'rejected'])
})

/**
 * @summary Read
 */
export const productReadParams = zod.object({
  "product_id": zod.number()
})

export const productReadResponse = zod.object({
  "reference": zod.string(),
  "name": zod.string(),
  "description": zod.union([zod.string(),zod.null()]),
  "category_name": zod.union([zod.string(),zod.null()]),
  "area_id": zod.number(),
  "price": zod.number(),
  "purchase_price": zod.union([zod.number(),zod.null()]),
  "init_stock": zod.union([zod.number(),zod.null()]),
  "actual_stock": zod.union([zod.number(),zod.null()]),
  "id": zod.number(),
  "state": zod.enum(['pending', 'valided', 'rejected'])
})

/**
 * @summary Update
 */
export const productUpdateParams = zod.object({
  "product_id": zod.number()
})

export const productUpdateBody = zod.object({
  "reference": zod.union([zod.string(),zod.null()]).optional(),
  "name": zod.union([zod.string(),zod.null()]).optional(),
  "description": zod.union([zod.string(),zod.null()]).optional(),
  "category_name": zod.union([zod.string(),zod.null()]).optional(),
  "area_id": zod.union([zod.number(),zod.null()]).optional(),
  "state": zod.union([zod.enum(['pending', 'valided', 'rejected']),zod.null()]).optional(),
  "sale_price": zod.union([zod.number(),zod.null()]).optional(),
  "purchase_price": zod.union([zod.number(),zod.null()]).optional(),
  "init_stock": zod.union([zod.number(),zod.null()]).optional(),
  "actual_stock": zod.union([zod.number(),zod.null()]).optional(),
  "comment": zod.union([zod.string(),zod.null()]).optional(),
  "updated_by_id": zod.union([zod.number(),zod.null()]).optional()
})

export const productUpdateResponse = zod.object({
  "reference": zod.string(),
  "name": zod.string(),
  "description": zod.union([zod.string(),zod.null()]),
  "category_name": zod.union([zod.string(),zod.null()]),
  "area_id": zod.number(),
  "price": zod.number(),
  "purchase_price": zod.union([zod.number(),zod.null()]),
  "init_stock": zod.union([zod.number(),zod.null()]),
  "actual_stock": zod.union([zod.number(),zod.null()]),
  "id": zod.number(),
  "state": zod.enum(['pending', 'valided', 'rejected'])
})

/**
 * @summary Delete
 */
export const productDeleteParams = zod.object({
  "product_id": zod.number()
})

export const productDeleteQueryParams = zod.object({
  "area_id": zod.number()
})

/**
 * Obtain list of product of an area
 * @summary Fetch All
 */
export const productFetchAllParams = zod.object({
  "area_id": zod.number()
})

export const productFetchAllQuerySkipDefault = 0;export const productFetchAllQueryLimitDefault = 10;

export const productFetchAllQueryParams = zod.object({
  "skip": zod.number().optional(),
  "limit": zod.number().default(productFetchAllQueryLimitDefault)
})

export const productFetchAllResponseItem = zod.object({
  "reference": zod.string(),
  "name": zod.string(),
  "description": zod.union([zod.string(),zod.null()]),
  "category_name": zod.union([zod.string(),zod.null()]),
  "area_id": zod.number(),
  "price": zod.number(),
  "purchase_price": zod.union([zod.number(),zod.null()]),
  "init_stock": zod.union([zod.number(),zod.null()]),
  "actual_stock": zod.union([zod.number(),zod.null()]),
  "id": zod.number(),
  "state": zod.enum(['pending', 'valided', 'rejected'])
})
export const productFetchAllResponse = zod.array(productFetchAllResponseItem)

/**
 * Superuser can obtain list of product for one point of sale
 * @summary Fetch All For Superuser
 */
export const productFetchAllForSuperuserParams = zod.object({
  "area_id": zod.number()
})

export const productFetchAllForSuperuserQuerySkipDefault = 0;export const productFetchAllForSuperuserQueryLimitDefault = 10;

export const productFetchAllForSuperuserQueryParams = zod.object({
  "skip": zod.number().optional(),
  "limit": zod.number().default(productFetchAllForSuperuserQueryLimitDefault)
})

export const productFetchAllForSuperuserBody = zod.object({
  "email": zod.email(),
  "is_active": zod.boolean(),
  "is_superuser": zod.boolean(),
  "is_owner": zod.boolean(),
  "name": zod.union([zod.string(),zod.null()]).optional(),
  "last_name": zod.string(),
  "phone": zod.union([zod.string(),zod.null()]),
  "created_at": zod.union([zod.iso.datetime({}),zod.null()]).optional(),
  "id": zod.number(),
  "is_password_reinitialized": zod.boolean(),
  "owned_areas": zod.union([zod.array(zod.object({
  "name": zod.string(),
  "location": zod.union([zod.string(),zod.null()]).optional(),
  "owner_id": zod.union([zod.number(),zod.null()]).optional(),
  "id": zod.number()
})),zod.null()]).optional(),
  "employee": zod.union([zod.object({
  "first_name": zod.string(),
  "last_name": zod.union([zod.string(),zod.null()]),
  "phone": zod.string(),
  "adress": zod.string(),
  "id": zod.number(),
  "area_id": zod.number(),
  "user_id": zod.union([zod.number(),zod.null()])
}),zod.null()]),
  "roles": zod.array(zod.object({
  "name": zod.string(),
  "description": zod.union([zod.string(),zod.null()]),
  "permission": zod.union([zod.array(zod.string()),zod.null()]),
  "id": zod.number()
}))
})

export const productFetchAllForSuperuserResponseItem = zod.object({
  "reference": zod.string(),
  "name": zod.string(),
  "description": zod.union([zod.string(),zod.null()]),
  "category_name": zod.union([zod.string(),zod.null()]),
  "area_id": zod.number(),
  "price": zod.number(),
  "purchase_price": zod.union([zod.number(),zod.null()]),
  "init_stock": zod.union([zod.number(),zod.null()]),
  "actual_stock": zod.union([zod.number(),zod.null()]),
  "id": zod.number(),
  "state": zod.enum(['pending', 'valided', 'rejected'])
})
export const productFetchAllForSuperuserResponse = zod.array(productFetchAllForSuperuserResponseItem)

/**
 * @summary Dashboard
 */
export const productDashboardQuerySkipDefault = 0;export const productDashboardQueryLimitDefault = 10;

export const productDashboardQueryParams = zod.object({
  "area_id": zod.number(),
  "skip": zod.number().optional(),
  "limit": zod.number().default(productDashboardQueryLimitDefault)
})

export const productDashboardResponseItem = zod.object({
  "reference": zod.string(),
  "name": zod.string(),
  "description": zod.union([zod.string(),zod.null()]),
  "category_name": zod.union([zod.string(),zod.null()]),
  "area_id": zod.number(),
  "price": zod.number(),
  "purchase_price": zod.union([zod.number(),zod.null()]),
  "init_stock": zod.union([zod.number(),zod.null()]),
  "actual_stock": zod.union([zod.number(),zod.null()]),
  "id": zod.number(),
  "state": zod.enum(['pending', 'valided', 'rejected']),
  "incoming_quantity": zod.union([zod.number(),zod.null()]).optional(),
  "outgoing_quantity": zod.union([zod.number(),zod.null()]).optional()
})
export const productDashboardResponse = zod.array(productDashboardResponseItem)

/**
 * @summary Price History
 */
export const productPriceHistoryParams = zod.object({
  "product_id": zod.number()
})

export const productPriceHistoryQuerySkipDefault = 0;export const productPriceHistoryQueryLimitDefault = 10;

export const productPriceHistoryQueryParams = zod.object({
  "area_id": zod.number(),
  "type": zod.enum(['sale', 'purchase']),
  "skip": zod.number().optional(),
  "limit": zod.number().default(productPriceHistoryQueryLimitDefault)
})

export const productPriceHistoryResponseItem = zod.object({
  "product_id": zod.number(),
  "type": zod.enum(['sale', 'purchase']),
  "value": zod.number(),
  "id": zod.number(),
  "date": zod.iso.datetime({})
})
export const productPriceHistoryResponse = zod.array(productPriceHistoryResponseItem)

